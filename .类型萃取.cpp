#include<iostream>#include<stdlib.h>using namespace std;//¿‡–Õ›Õ»°struct __truetype{	bool get()	{		return true;	}};struct __falsetype{	bool get()	{		return false;	}};template<typename T>struct typetraits{	typedef __falsetype __ispodtype;};template<>struct typetraits<int >{	typedef __truetype __ispodtype;};template<>struct typetraits<char >{	typedef __truetype __ispodtype;};template<>struct typetraits<short >{	typedef __truetype __ispodtype;};template<>struct typetraits<bool >{	typedef __truetype __ispodtype;};template<>struct typetraits<unsigned int >{	typedef __truetype __ispodtype;};template<>struct typetraits<unsigned short >{	typedef __truetype __ispodtype;};template<>struct typetraits<unsigned long >{	typedef __truetype __ispodtype;};template<>struct typetraits<long >{	typedef __truetype __ispodtype;};template<>struct typetraits<long long >{	typedef __truetype __ispodtype;};template<>struct typetraits<unsigned long long >{	typedef __truetype __ispodtype;};template<>struct typetraits<long double >{	typedef __truetype __ispodtype;};template<>struct typetraits<double >{	typedef __truetype __ispodtype;};template<>struct typetraits<float >{	typedef __truetype __ispodtype;};template<typename T>void Copy(const T*src, T* dst, size_t size){	if (typetraits<T>::__ispodtype().get())	{		cout << "__truetype:" << typeid(T).name() << endl;		memcpy(dst, src, size*sizeof(T));	}	else	{		cout << "__falsetype:" << typeid(T).name() << endl;		for (size_t i = 0; i < size; i++)		{			dst[i] = src[i];		}	}}void test(){	int a1[8] = { 1, 2, 3, 4, 5, 6 };	int a2[8] = { 9, 5, 6, 7, 8, 2, 2 };	Copy(a1, a2, 3);	cout << a2<<endl;		string c1[10] = {"123","7989465","456321","4561","4563"};	string c2[5] = {"654","312","a"};	Copy(c1, c2, 3);		}int main(){	test();	system("pause");	return 0;}