#include<iostream>#include<stdlib.h>using namespace std;//¿‡–Õ›Õ»°struct __TrueType{	bool Get()	{		return true;	}};struct __FalseType{	bool Get()	{		return false;	}};template<typename T>struct TypeTraits{	typedef __FalseType __IsPODType;};template<>struct TypeTraits<int >{	typedef __TrueType __IsPODType;};template<>struct TypeTraits<char >{	typedef __TrueType __IsPODType;};template<>struct TypeTraits<short >{	typedef __TrueType __IsPODType;};template<>struct TypeTraits<bool >{	typedef __TrueType __IsPODType;};//template<typename T>//void Copy(const T*src, T* dst, size_t size, __FalseType)//{//	cout << "__FalseType:" << typeid(T).name() << endl;//	for (size_t i = 0; i < size; i++)//	{//		dst[i] = src[i];//	}//}////template<typename T>//void Copy(const T*src, T* dst, size_t size, __TrueType)//{//	cout << "__TrueType:" << typeid(T).name() << endl;//	memcpy(dst, src, size*sizeof(T));////}template<typename T>void Copy(const T*src, T* dst, size_t size){	if (TypeTraits<T>::__IsPODType().Get())	{		cout << "__TrueType:" << typeid(T).name() << endl;		memcpy(dst, src, size*sizeof(T));	}	else	{		cout << "__FalseType:" << typeid(T).name() << endl;		for (size_t i = 0; i < size; i++)		{			dst[i] = src[i];		}	}}void test(){	int a1[8] = { 1, 2, 3, 4, 5, 6 };	int a2[8] = { 9, 5, 6, 7, 8, 2, 2 };//	Copy(a1, a2, 8, TypeTraits<int >::__IsPODType());		string c1[10] = {"123","7989465","456321","4561","4563"};	string c2[5] = {"654","312","a"};	Copy(c1, c2, 3);}int main(){	test();	system("pause");	return 0;}